class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        paths = [0] * m * n
        paths[0] = 1
        if obstacleGrid[0][0] == 1:
            return 0
        for i in range(m):
            for j in range(n):
                if not obstacleGrid[i][j]:
                    if i + 1 < m and not obstacleGrid[i + 1][j]:
                        paths[i + 1 + j * m] += paths[i + j * m]
                    if j + 1 < n and not obstacleGrid[i][j + 1]:
                        paths[i + (j + 1) * m] += paths[i + j * m]
        return paths[-1]
